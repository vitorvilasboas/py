#### SETTINGS TEMPLATE ####
<StdSettingsContainer>:
    cols: 1
    spacing: 5
    padding: 5
    size_hint_y: None
    height: self.minimum_height
    on_minimum_height:
        self.height=self.minimum_height

<StdSettingItem>:
    size_hint_y: None
    height: 60
    rows: 1
    canvas:
        Color:
            rgba: 0.149, 0.161, 0.204, 1 # 47 / 255., 167 / 255., 212 / 255., .1
        Rectangle:
            pos: self.x, self.y + 1
            size: self.size
        Color:
            rgb: .5, .4, .5
#            rgba: 0.878, 0.984, 0.984, 1
        Rectangle:
            pos: self.x, self.y - 2
            size: self.width, 1
    Label:
        size_hint_x: .6
        id: labellayout
        markup: True
        text: u'{0}\n[size=13sp][color=999999]{1}[/color][/size]'.format(root.title or '', root.desc or '')
        font_size: '15sp'
        text_size: self.size
        valign: 'top'

<StdSettingTitle>:
    size_hint_y: None
    height: 30
    markup: True
#    text: u'{0}\n[size=13sp][color=000000]{1}[/color][/size]'.format(root.title or '', root.desc or '')
    text: u'{0}'.format(root.title or '')
    font_size: '15sp'
    text_size: self.size
    valign: 'center'
    halign: 'center'
    canvas:
        Color:
            rgba: 47 / 255., 167 / 255., 212 / 255., .4
        Rectangle:
            pos: self.x, self.y + 1
            size: self.size
        Color:
            rgb: .5, .5, .5
        Rectangle:
            pos: self.x, self.y - 2
            size: self.width, 1

<StdSettingBoolean>:
    value: button.state == 'down' and True or False
    ToggleButton:
        id: button
        text: root.button_text
        size_hint_x: None
        width: 150
        pos: root.pos
        state: root.value and 'down' or 'normal'

<StdSettingString>:
    value: input.text
    AnchorLayout:
        size_hint_x: None
        width: 200
        TextInput:
            id: input
            size_hint_y: None
            height: 30
            pos: root.pos
            multiline: True
            text: root.value

<StdSettingStringLong>:
    value: input.text
    AnchorLayout:
        size_hint_x: None
        width: 500
        TextInput:
            id: input
            size_hint_y: None
            height: 30
            pos: root.pos
            multiline: True
            text: root.value

<StdSettingSlider>:
    value: root._to_numtype(slider.value)
    Label:
        id: sliderlabel
        size_hint_x: None
        width: 50
        text: str(root._to_numtype(slider.value))
    Slider:
        id: slider
        min: root.min
        max: root.max
        pos: root.pos
        size_hint_x: None
        width: 150
        value: root.value

<EditSettingPopup>:
    size_hint: None, None
    size: 400, 150
    title: 'Edit setting'
    BoxLayout:
        orientation: 'vertical'
        TextInput:
            id: input
            markup: False
            multiline: False
            on_text_validate: root.dispatch('on_validate', self.text)
        BoxLayout:
            orientation: 'horizontal'
            Button:
                text: 'OK'
                on_press: root.dispatch('on_validate', input.text)
            Button:
                text: 'Cancel'
                on_press: root.dismiss()

<MyButton>:
    canvas.before:
        Color:
            rgba: 0.086, 0.243, 0.949, 1
        Ellipse:
            pos:self.pos
            size:self.height,self.height
        Ellipse:
            pos:self.x+self.width-self.height,self.y
            size:self.height,self.height
        Rectangle:
            pos:self.x+self.height/2.0,self.y
            size:self.width-self.height

<MySmoothButton>:
    background_color: (0,0,0,0)
    background_normal: ''
    back_color: (1, 0, 1, 1)
    border_radius: [18]
#    bold: True
#    color: self.back_color
    canvas.before:
        Color:
            rgba: self.back_color
        RoundedRectangle:
            size: self.size
            pos: self.pos
            radius: self.border_radius

<MyStrokeButton>:
    background_color: (0,0,0,0)
    background_normal: ''
    back_color: (1, 0, 1, 1)
    border_radius: 18
    color: self.back_color
    bold: True
#    color: self.back_color
    canvas.before:
        Color:
            rgba: self.back_color
        Line:
            rounded_rectangle: (self.pos[0], self.pos[1], self.size[0], self.size[1], self.border_radius)
            width: 1.2